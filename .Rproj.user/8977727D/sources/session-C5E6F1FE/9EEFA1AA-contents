R_file_loc<- "./R/"
sourceCpp("./src/Q_theta_cpp_include_nz.cpp")
sourceCpp("./src/RcppExports.cpp")

Rcpp::compileAttributes()


R_file<-list.files(R_file_loc)
for (i in 1:length(R_file)) {
  source(paste0(R_file_loc,R_file[i]))
}
sourceCpp("./src/Q_theta_cpp_include_nz.cpp")


library(NlcOptim)
library(betareg)
library(parallel)
library(pracma)
library(Rcpp)
library(penalized)
library(doParallel)
library(glmnet)
library(doRNG)

# lapply(libname,require, character.only = TRUE)



set.seed(32608)

beta_0<- -5
beta_1<-100
beta_2<-5
beta_3<-1
beta_4<-1
beta_5<-1
beta_conf<-1
# alpha_01<- -0.5
# alpha_11<- -0.3
# alpha_02<-0.5
# alpha_12<-0.3

# alpha_01<- -1
# alpha_11<- 0.5
# alpha_02<- -5
# alpha_12<- 0.5

gamma_0<-0.3
gamma_1<- -0.3
gamma_conf<-0.1
# gamma_0<--5
# gamma_1<- -5
phi<-10
# psi<-0.4
delta<-1

alpha_0_vec<-c(-5,-5)
alpha_1_vec<-c(0.5,0.5)
alpha_conf<-0.1
psi_vec<-c(0.5)

# par_true<-c(beta_0,beta_1,beta_2,beta_3,beta_4,beta_5,gamma_0,gamma_1,phi,delta,alpha_0_vec,alpha_1_vec,psi_vec)

# 
# nsample<-300
# ndata<-100
# 
# beta_dist_trans<-function(mu,phi) {
#   alpha<-mu*phi
#   beta<-phi-mu*phi
#   return(c(alpha,beta))
# }

realdata=read.csv("../VSLprocessed_data.csv",header=T,na.strings = c("",NA))
Libsize<-realdata$libSiz

generate_sim<-function(nsample,ndata=100) {
  par_true<-c(beta_0,beta_1,beta_2,beta_3,beta_4,beta_5,gamma_0,gamma_1,phi,delta,alpha_0_vec,alpha_1_vec,psi_vec,
              beta_conf,alpha_conf,gamma_conf)
  
  n_total<-nsample*ndata
  x_i<-rbinom(n_total,1,0.5)
  x_conf<-rnorm(n_total)
  mu<-apply(cbind(x_i,x_conf),1,function(x) expit(alpha_0_vec+alpha_1_vec*x[1]+alpha_conf*x_conf[2]))
  # mu<-expit(alpha_0_vec+alpha_1_vec*x_i)
  # mu_2<-expit(alpha_02+alpha_12*x_i)
  Delta<-expit(gamma_0+gamma_1*x_i+gamma_conf*x_conf)
  
  
  
  psi_vec_total<-c(psi_vec,1-sum(psi_vec))
  
  dist_gp<-sample(seq_len(length(alpha_0_vec)),n_total,psi_vec_total,replace = T)
  zero_gp<-rbinom(n_total,1,Delta)
  tru_m_vec<-numeric(n_total)
  for(i in 1:n_total) {
    if(zero_gp[i]==1) {
      tru_m<-0
    } else {
      dist_gp_ind<-dist_gp[i]
      mu_use<-mu[dist_gp_ind,i]
      tru_m<-rbeta(1,mu_use*phi,(1-mu_use)*phi)
    }
    tru_m_vec[i]<-tru_m
  }
  
  epis<-rnorm(n_total,sd=delta)
  Y_vec<-beta_0+beta_1*tru_m_vec+beta_2*(tru_m_vec>0)+
    beta_3*x_i+beta_4*x_i*(tru_m_vec>0)+beta_5*x_i*tru_m_vec + beta_conf*x_conf+epis
  
  # ## False zero
  # li_vec<-sample(Libsize,n_total,replace = T)
  # false_zero_obs<-(tru_m_vec*li_vec)>1
  # obs_m<-tru_m_vec*false_zero_obs
  # num_false_zero<-sum(tru_m_vec!=obs_m)
  # cat("number of false zero ",num_false_zero)
  
  obs_m<-tru_m_vec
  
  output_data<-data.frame(x=x_i,x_conf=x_conf,Y=Y_vec,M=obs_m,true_M=tru_m_vec,zero_ind=zero_gp,
                          M_ind=dist_gp,libsize=li_vec,dat_ind=rep(1:ndata,each=nsample))
  return(list(data=output_data,par_true=par_true))
  
}

output_data<-generate_sim(100,ndata = 100)
data_use<-output_data$data[output_data$data$dat_ind==1,-c(5,7)]


res_list <-
  apply_real_data_func(
    taxon_name = "M",
    lib_name = "libsize",
    y_name = "Y",
    x_name = "x",
    conf_name = "x_conf",
    data = data_use,
    k_range = 1,
    num_cores = 1
  )


para_vec<-true_beta


class(res_list$list_save[[1]]$res_list_med[[2]][[1]])
c
test<-try(a+c,T)

inherits(test,"try-error")




####

 library(MarZICM)
 library(SummarizedExperiment)
 ## A make up example with 1 taxon and 100 subjects.
 set.seed(1)
 nSub<-200
 ## generate covariate of interest X
 X <- rbinom(nSub,1,0.5)
 ## generate mean of mediator M
 mu <- exp(-5+X)/(1+exp(-5+X))
 phi <- 10
 ## generate mediator M
 M<-rbeta(nSub,mu*phi,(1-mu)*phi)
 ## library size set to 10000
 libsize <- 10000
 ## generate observed zero, both structure zero and zero due to LOD mechanism
 non_zero_ind <- 1 - rbinom(nSub,1,exp(-3+0.3*X)/(1+exp(-3+0.3*X)))
 tru_m<-M * non_zero_ind
 obs_m<-tru_m* ((M * libsize)>1)
 ## generate outcome Y
 Y <- 1 + 100 * tru_m + (tru_m > 0) + X
 ## Construct SummerizedExperiment object
 CovData <- cbind(Y=Y,X=X,libsize=libsize)
 test_dat <- SummarizedExperiment(assays=list(MicrobData=t(obs_m)),colData=CovData)
 ## run the analysis
 res<-MarZICM(Experiment_dat = test_dat,
 lib_name = "libsize",
 y_name = "Y",
 x_name = "X",
 num_cores = 1,
 mediator_mix_range = 1)

 ## Pull out significant NIE1
 NIE1 <- res$NIE1
 subset(NIE1,significance == TRUE)
 }

res$NIE2


