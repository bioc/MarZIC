apply_real_data_func <- function(taxon_name, lib_name, y_name, x_name, conf_name=NULL, data, k_range,
                                 non_zero_prop=0.1, num_cores = detectCores()) {
  real_data_name <- colnames(data)
  taxon_name_ind <- grep(taxon_name, real_data_name)
  taxon_dat_temp <- data[, taxon_name_ind, drop=FALSE]
  # if (length(taxon_name_ind) > 1) {
  #   use_dat_ind <- colSums(taxon_dat_temp > 0) > 0.1 * nrow(data)
  #
  #   taxon_dat <- taxon_dat_temp[, use_dat_ind]
  #   num_taxon <- ncol(taxon_dat)
  # } else {
  #   taxon_dat <- as.data.frame(taxon_dat_temp)
  #   num_taxon <- 1
  # }


  use_dat_ind <- colSums(taxon_dat_temp > 0) > (non_zero_prop * nrow(data))
  if (sum(use_dat_ind)==0) {
    stop("There's no taxon has non-zero observations more than", non_zero_prop*100, "%")
  }

  taxon_dat <- taxon_dat_temp[, use_dat_ind, drop=FALSE]
  num_taxon <- ncol(taxon_dat)
  num_sub <- nrow(taxon_dat)
  taxon_ori_name <- colnames(taxon_dat)

  yi_vec <- data[, y_name]
  xi_vec <- data[, x_name]
  li_vec <- data[, lib_name]
  conf_mat <- as.matrix(data[, conf_name, drop=FALSE])

  trial <- seq_len(num_taxon)

  # cl <- parallel::makeCluster(num_cores)
  #
  # parallel::clusterExport(cl = cl,
  #                         varlist = c("real_data_run_func_nomix",
  #                                     "Q_theta_cpp_nomix"),
  #                         envir = environment())

  registerDoParallel(num_cores)


  list_save <- foreach(i = trial
                       ) %dopar% {
    obs_m_vec <- taxon_dat[, i]
    temp_name <- colnames(taxon_dat)[i]
    res_list_med <- list()
    AIC_select <- c()
    for (k in k_range) {
      if (k == 1) {
        if (sum(obs_m_vec == 0) > (0.1 * length(obs_m_vec))) {
          cat(" taxon_z ", temp_name, "\n")
          res_temp <- try(real_data_run_func_nomix(yi_vec, obs_m_vec, xi_vec, li_vec, conf_mat, k), T)
        } else {
          cat(" taxon_nz ", temp_name, "\n")
          res_temp <- try(real_data_run_func_nz_nomix(yi_vec, obs_m_vec, xi_vec, li_vec, conf_mat, k), T)
        }
      } else {
        if (sum(obs_m_vec == 0) > (0.1 * length(obs_m_vec))) {
          cat(" taxon_z ", temp_name, "\n")
          res_temp <- try(real_data_run_func(yi_vec, obs_m_vec, xi_vec, li_vec, conf_mat, k), T)
        } else {
          cat(" taxon_nz ", temp_name, "\n")
          res_temp <- try(real_data_run_func_nz(yi_vec, obs_m_vec, xi_vec, li_vec, conf_mat, k), T)
        }
      }
      if (class(res_temp) == "try-error") {
        AIC_select[k]<-NA
      } else if (any(is.na(res_temp$par_sd))) {
        AIC_select[k]<-NA
      } else {
        AIC_select[k]<-res_temp$AIC_est
      }
      res_temp$taxon_name <- temp_name
      res_list_med[[k]] <- res_temp
    }
    if (all(is.na(AIC_select))) {
      res_fin_med<-res_list_med[[1]]
    } else {
      res_fin_med <- res_list_med[[which.min(AIC_select)]]
    }

    return(list(res_fin_med = res_fin_med, res_list_med = res_list_med))
  }
  # parallel::stopCluster(cl)


  # list_save<-mclapply(trial,mcapply_func,mc.cores = num_cores)

  return(list(list_save=list_save,nTaxa=num_taxon, nSub=num_sub, taxon_name=taxon_ori_name))
}
